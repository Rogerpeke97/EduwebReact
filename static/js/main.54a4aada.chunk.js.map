{"version":3,"sources":["components/Three.js","components/Grid1.js","App.js","serviceWorker.js","components/Navbar.js","index.js"],"names":["OrbitControls","require","THREE","ThreeScene","useEffect","canvasContainer","document","getElementById","scene","camera","clientWidth","clientHeight","renderer","position","set","params","Vector1x","Vector1y","Vector1z","gui","dat","autoPlace","domElement","id","appendChild","add","name","console","log","light","target","gridHelperZaxis","gridHelper","axisGrid","rotateOnAxis","pointsX","push","pointsY","material2","dots","materialDot","color","geometryX","setFromPoints","geometryY","lineX","lineY","i","dot","load","font","txt_mat","j","TextGeometry","size","height","curveSegments","bevelEnabled","bevelThickness","bevelSize","bevelOffset","bevelSegments","TextMesh","k","vectorMaterial1","pointVector1","geometryVector","VectorX","geometryCone","materialCone","cone","frustumCulled","VectorInput","querySelectorAll","addEventListener","array","geometry","attributes","arrayTest","__controllers","getValue","Float32Array","TWEEN","Tween","to","onStart","x","y","z","isVector3","start","requestAnimationFrame","animateTween","time","update","needsUpdate","window","setSize","aspect","updateProjectionMatrix","animate","render","Grid1","className","Three","App","Boolean","location","hostname","match","Navbar","ReactDOM","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"yNAMMA,EAAgBC,EAAQ,GAARA,CAAgCC,GAyPvCC,MAvPf,WAkPI,OAjPAC,qBAAU,WACN,IAAIC,EAAkBC,SAASC,eAAe,mBAC1CC,EAAQ,IAAIN,QACZO,EAAS,IAAIP,oBAAwB,GAAIG,EAAgBK,YAAcL,EAAgBM,aAAc,GAAK,KAC1GC,EAAW,IAAIV,gBACnBO,EACKI,SACAC,IAAI,EAAG,EAAG,IACf,IAAIC,EAAS,CACTC,SAAU,EACVC,SAAU,EACVC,SAAU,GAEVC,EAAM,IAAIC,IAAQ,CAACC,WAAW,IAClCF,EAAIG,WAAWC,GAAK,MACpBlB,EAAgBmB,YAAYL,EAAIG,YAChCH,EACKM,IAAIV,EAAQ,YACZW,KAAK,YACVP,EACKM,IAAIV,EAAQ,YACZW,KAAK,YACVP,EACKM,IAAIV,EAAQ,YACZW,KAAK,YAEVC,QAAQC,IAAIb,EAAOC,UAEnBR,EAAMiB,IAAI,IAAIvB,eAAmB,UAEjC,IAAI2B,EAAQ,IAAI3B,aAAiB,aAAc,EAAG,KAClD2B,EACKhB,SACAC,IAAI,EAAG,EAAG,IACfN,EAAMiB,IAAII,GACVvB,SACKC,eAAe,mBACfiB,YAAYZ,EAASU,YAEX,IAAItB,EAAcS,EAAQG,EAASU,YAE7CQ,OACAhB,IAAI,EAAG,EAAG,GAOf,IAAIiB,EAAkB,IAAI7B,aAAiB,GAAI,IAC/CM,EAAMiB,IAAIM,GAGV,IAAIC,EAAa,IAAI9B,aAAiB,GAAI,IACtC+B,EAAW,IAAI/B,UAAc,EAAG,EAAG,GACvC8B,EAAWE,aAAaD,EAAU,QAClCzB,EAAMiB,IAAIO,GAEV,IAAIG,EAAU,GAEdA,EAAQC,KAAK,IAAIlC,WAAgB,GAAI,EAAG,IACxCiC,EAAQC,KAAK,IAAIlC,UAAc,GAAI,EAAG,IAEtC,IAAImC,EAAU,GAEdA,EAAQD,KAAK,IAAIlC,UAAc,EAAG,GAAI,IACtCmC,EAAQD,KAAK,IAAIlC,UAAc,GAAI,GAAI,IAoBvC,IAlBA,IAAIoC,EAAY,IAAIpC,oBAEhBqC,EAAO,IAAIrC,iBAAqB,IAAM,GAAI,IAExCsC,EAAc,IAAItC,oBAAwB,CAACuC,MAAO,QAEpDC,GAAY,IAAIxC,kBAEfyC,cAAcR,GAEfS,GAAY,IAAI1C,kBAEfyC,cAAcN,GAEfQ,EAAQ,IAAI3C,OAAWwC,EAAWJ,GAElCQ,EAAQ,IAAI5C,OAAW0C,EAAWN,GAE7BS,GAAK,GAAIA,GAAK,GAAIA,IAAK,CAC5B,IAAIC,EAAM,IAAI9C,OAAWqC,EAAMC,GAC/BQ,EACKnC,SACAC,IAAIiC,EAAG,EAAG,GACfF,EAAMpB,IAAIuB,GAEd,IAAK,IAAID,GAAK,GAAIA,GAAK,GAAIA,IAAK,CAC5B,IAAIC,EAAM,IAAI9C,OAAWqC,EAAMC,GAC/BQ,EACKnC,SACAC,IAAI,EAAGiC,EAAG,GACfD,EAAMrB,IAAIuB,GAEdH,EACKhC,SACAC,IAAI,EAAG,EAAG,GACfgC,EACKjC,SACAC,IAAI,EAAG,EAAG,GACfN,EAAMiB,IAAIoB,GACVrC,EAAMiB,IAAIqB,IAGG,IAAI5C,cACV+C,KAAK,0CAA0C,SAACC,GAEnD,IADA,IAAIC,EAAU,IAAIjD,oBAAwB,CAACuC,MAAO,WACzCW,GAAK,GAAIA,GAAK,GAAIA,IAAK,CAC5B,IAAIC,EAAe,IAAInD,eAAJ,UAA0BkD,GAAK,CAC9CF,KAAMA,EACNI,KAAM,GACNC,OAAQ,IACRC,cAAe,GACfC,cAAc,EACdC,eAAgB,EAChBC,UAAW,GACXC,YAAa,EACbC,cAAe,IAEfC,EAAW,IAAI5D,OAAWmD,EAAcF,GAC5CW,EACKjD,SACAC,IAAIsC,GAAI,IAAM,MACnBP,EAAMpB,IAAIqC,GAEd,IAAK,IAAIC,GAAK,GAAIA,GAAK,GAAIA,IAAK,CAC5B,IAAIV,EAAe,IAAInD,eAAJ,UAA0B6D,GAAK,CAC9Cb,KAAMA,EACNI,KAAM,GACNC,OAAQ,IACRC,cAAe,GACfC,cAAc,EACdC,eAAgB,EAChBC,UAAW,GACXC,YAAa,EACbC,cAAe,IAEfC,EAAW,IAAI5D,OAAWmD,EAAcF,GAC5CW,EACKjD,SACAC,KAAK,GAAKiD,GAAI,MACnBjB,EAAMrB,IAAIqC,OAKlB,IAAIE,EAAkB,IAAI9D,oBAAwB,CAACuC,MAAO,UACtDwB,EAAe,GACnBA,EAAa7B,KAAK,IAAIlC,UAAc,EAAG,EAAG,IAC1C+D,EAAa7B,KAAK,IAAIlC,UAAc,EAAG,EAAG,IAC1C+D,EAAa7B,KAAK,IAAIlC,UAAc,EAAG,EAAG,IAC1C,IAAIgE,GAAiB,IAAIhE,kBAEpByC,cAAcsB,GAEfE,EAAU,IAAIjE,OAAWgE,EAAgBF,GAC7CG,EACKtD,SACAC,IAAI,EAAG,EAAG,GACf,IAAIsD,EAAe,IAAIlE,iBAAqB,GAAK,GAAI,IACjDmE,EAAe,IAAInE,oBAAwB,CAACuC,MAAO,UACnD6B,EAAO,IAAIpE,OAAWkE,EAAcC,GAExCF,EAAQ1C,IAAI6C,GACZH,EAAQI,eAAgB,EAExB/D,EAAMiB,IAAI0C,GAEV,IAAK,IAAIpB,EAAI,EAAGA,EAAI,EAAGA,IAAK,CACxB,IAAIyB,EAAclE,SAASmE,iBAAiB,MAAM1B,GAClDpB,QAAQC,IAAI4C,GACZA,EAAYjD,GAAK,YAAcwB,EAClBzC,SAASC,eAAe,YAAcwC,GAC5C2B,iBAAiB,UAAU,WAC9B,IAAIC,EAAQR,EAAQS,SAASC,WAAWhE,SAAS8D,MAC7CG,EAAY,CACZ,EACA,EACA,EACA,EACA,EACA,EACA3D,EACK4D,cAAc,GACdC,WACL7D,EACK4D,cAAc,GACdC,WACL7D,EACK4D,cAAc,GACdC,YAETF,EAAY,IAAIG,aAAaH,GAI7B,IAAII,IACCC,MAAMR,GACNS,GAAGN,GACHO,SAAQ,WACL,IAAIH,IACHC,MAAMb,EAAKzD,UACXuE,GAAG,CAACE,EAAGnE,EAAI4D,cAAc,GAAGC,WAAYO,EAAGpE,EAAI4D,cAAc,GAAGC,WAAYQ,EAAGrE,EAAI4D,cAAc,GAAGC,WAAYS,WAAW,IAC3HC,WAEJA,QAOLC,uBANA,SAASC,EAAaC,GAClBX,IAAMY,OAAOD,GACbF,sBAAsBC,GACtBzB,EAAQS,SAASC,WAAWhE,SAASkF,aAAc,QAO/DtF,EAAOI,SAAS2E,EAAI,EACpBQ,OAAOtB,iBAAiB,UAExB,WACI9D,EAASqF,QAAQ5F,EAAgBK,YAAaL,EAAgBM,cAC9DF,EAAOyF,OAAS7F,EAAgBK,YAAcL,EAAgBM,aAC9DF,EAAO0F,4BALuC,GASlDvF,EAASqF,QAAQ5F,EAAgBK,YAAaL,EAAgBM,eAChD,SAAVyF,IACAT,sBAAsBS,GACtBxF,EAASyF,OAAO7F,EAAOC,GAE3B2F,MAKA,yBAAK7E,GAAG,qBC/ND+E,MA1Bf,WACI,OACI,yBAAKC,UAAU,oBACX,kDAAuB,uBAAGA,UAAU,2BACpC,yBAAKA,UAAU,kBACX,4DACA,8PAMJ,yBAAKA,UAAU,mBACX,sHAC2F,6BAD3F,mDAIA,0GAGA,kBAACC,EAAD,SCVDC,MARf,WACE,OACE,yBAAKF,UAAU,aACb,kBAAC,EAAD,QCKcG,QACW,cAA7BV,OAAOW,SAASC,UAEe,UAA7BZ,OAAOW,SAASC,UAEhBZ,OAAOW,SAASC,SAASC,MACvB,2DCTSC,MAPf,WACI,OACI,yBAAKP,UAAU,YCGvBQ,IAASV,OACP,kBAAC,IAAMW,WAAP,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,OAEF1G,SAASC,eAAe,SFuHpB,kBAAmB0G,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL7F,QAAQ6F,MAAMA,EAAMC,a","file":"static/js/main.54a4aada.chunk.js","sourcesContent":["import React from 'react';\r\nimport {useEffect} from \"react\";\r\nimport * as THREE from \"three\";\r\nimport * as dat from 'dat.gui';\r\nimport TWEEN from '@tweenjs/tween.js'\r\n\r\nconst OrbitControls = require('three-orbit-controls')(THREE);\r\n\r\nfunction ThreeScene() {\r\n    useEffect(() => {\r\n        let canvasContainer = document.getElementById('CanvasContainer')\r\n        let scene = new THREE.Scene();\r\n        let camera = new THREE.PerspectiveCamera(75, canvasContainer.clientWidth / canvasContainer.clientHeight, 0.1, 1000);\r\n        let renderer = new THREE.WebGLRenderer();\r\n        camera\r\n            .position\r\n            .set(0, 0, 10);\r\n        let params = {\r\n            Vector1x: 0,\r\n            Vector1y: 0,\r\n            Vector1z: 0\r\n        }\r\n        let gui = new dat.GUI({autoPlace: false});\r\n        gui.domElement.id = 'gui';\r\n        canvasContainer.appendChild(gui.domElement);\r\n        gui\r\n            .add(params, 'Vector1x')\r\n            .name('Vector1x')\r\n        gui\r\n            .add(params, 'Vector1y')\r\n            .name('Vector1y')\r\n        gui\r\n            .add(params, 'Vector1z')\r\n            .name('Vector1z')\r\n\r\n        console.log(params.Vector1x)\r\n\r\n        scene.add(new THREE.AmbientLight(0x222222));\r\n\r\n        let light = new THREE.PointLight('whitesmoke', 3, 200);\r\n        light\r\n            .position\r\n            .set(0, 5, 10);\r\n        scene.add(light);\r\n        document\r\n            .getElementById('CanvasContainer')\r\n            .appendChild(renderer.domElement);\r\n\r\n        let controls = new OrbitControls(camera, renderer.domElement);\r\n        controls\r\n            .target\r\n            .set(0, 0, 0)\r\n\r\n        // BIG GRID\r\n        /*let bigGridGeometry = new THREE.PlaneGeometry(20, 20, 16, 9);\r\n        let bigGridMaterial = new THREE.MeshBasicMaterial({color: 'white', opacity: 0.5, transparent: true, wireframe: true, side: THREE.DoubleSide});\r\n        let bigGrid = new THREE.Mesh(bigGridGeometry, bigGridMaterial);*/\r\n        //HORIZONTAL GRID\r\n        let gridHelperZaxis = new THREE.GridHelper(20, 20);\r\n        scene.add(gridHelperZaxis);\r\n\r\n        //VERTICAL GRID\r\n        let gridHelper = new THREE.GridHelper(20, 20);\r\n        let axisGrid = new THREE.Vector3(1, 0, 0);\r\n        gridHelper.rotateOnAxis(axisGrid, 1.5708) // THE ANGLE IS IN RADIANS, THIS IS 90 DEG\r\n        scene.add(gridHelper);\r\n\r\n        let pointsX = []; // X AXIS LINE\r\n\r\n        pointsX.push(new THREE.Vector3(- 10, 0, 0));\r\n        pointsX.push(new THREE.Vector3(10, 0, 0));\r\n\r\n        let pointsY = []; // Y AXIS LINE\r\n\r\n        pointsY.push(new THREE.Vector3(0, 10, 0));\r\n        pointsY.push(new THREE.Vector3(0, -10, 0));\r\n\r\n        let material2 = new THREE.LineBasicMaterial(); //LINES MATERIAL\r\n\r\n        let dots = new THREE.SphereGeometry(0.05, 32, 32); // DOTS ACROSS X OR Y COORDINATES\r\n\r\n        const materialDot = new THREE.MeshPhongMaterial({color: 'red'}); // DOT MATERIAL\r\n\r\n        let geometryX = new THREE\r\n            .BufferGeometry()\r\n            .setFromPoints(pointsX); // X LINE\r\n\r\n        let geometryY = new THREE\r\n            .BufferGeometry()\r\n            .setFromPoints(pointsY); // Y LINE\r\n\r\n        let lineX = new THREE.Line(geometryX, material2);\r\n\r\n        let lineY = new THREE.Line(geometryY, material2);\r\n\r\n        for (let i = -10; i <= 10; i++) { // setting the dots across the x axis\r\n            let dot = new THREE.Mesh(dots, materialDot);\r\n            dot\r\n                .position\r\n                .set(i, 0, 0);\r\n            lineX.add(dot)\r\n        }\r\n        for (let i = -10; i <= 10; i++) { // setting the dots across the y axis\r\n            let dot = new THREE.Mesh(dots, materialDot);\r\n            dot\r\n                .position\r\n                .set(0, i, 0);\r\n            lineY.add(dot)\r\n        }\r\n        lineX\r\n            .position\r\n            .set(0, 0, 0)\r\n        lineY\r\n            .position\r\n            .set(0, 0, 0)\r\n        scene.add(lineX)\r\n        scene.add(lineY)\r\n\r\n        //NUMBERS FOR THE COORDINATE AXIS\r\n        let loader = new THREE.FontLoader();\r\n        loader.load('fonts/helvetiker_regular.typeface.json', (font) => {\r\n            let txt_mat = new THREE.MeshPhongMaterial({color: 0xffffff});\r\n            for (let j = -10; j <= 10; j++) { // ADDING THE NUMBERS FOR EACH DOT IN X\r\n                let TextGeometry = new THREE.TextGeometry(`${j}`, {\r\n                    font: font,\r\n                    size: 0.1,\r\n                    height: 0.05,\r\n                    curveSegments: 12,\r\n                    bevelEnabled: false,\r\n                    bevelThickness: 1,\r\n                    bevelSize: 0.5,\r\n                    bevelOffset: 0,\r\n                    bevelSegments: 3\r\n                });\r\n                let TextMesh = new THREE.Mesh(TextGeometry, txt_mat);\r\n                TextMesh\r\n                    .position\r\n                    .set(j, -0.2, -0.025)\r\n                lineX.add(TextMesh)\r\n            }\r\n            for (let k = -10; k <= 10; k++) { // ADDING THE NUMBERS FOR EACH DOT IN Y\r\n                let TextGeometry = new THREE.TextGeometry(`${k}`, {\r\n                    font: font,\r\n                    size: 0.1,\r\n                    height: 0.05,\r\n                    curveSegments: 12,\r\n                    bevelEnabled: false,\r\n                    bevelThickness: 1,\r\n                    bevelSize: 0.5,\r\n                    bevelOffset: 0,\r\n                    bevelSegments: 3\r\n                });\r\n                let TextMesh = new THREE.Mesh(TextGeometry, txt_mat);\r\n                TextMesh\r\n                    .position\r\n                    .set(-0.2, k, -0.025)\r\n                lineY.add(TextMesh)\r\n            }\r\n        });\r\n\r\n        // VECTORS\r\n        let vectorMaterial1 = new THREE.MeshBasicMaterial({color: 'green'});\r\n        let pointVector1 = []\r\n        pointVector1.push(new THREE.Vector3(0, 0, 0));\r\n        pointVector1.push(new THREE.Vector3(0, 0, 0));\r\n        pointVector1.push(new THREE.Vector3(0, 0, 0));\r\n        let geometryVector = new THREE\r\n            .BufferGeometry()\r\n            .setFromPoints(pointVector1); // VECTOR 1 LINE\r\n\r\n        let VectorX = new THREE.Line(geometryVector, vectorMaterial1);\r\n        VectorX\r\n            .position\r\n            .set(0, 0, 0)\r\n        let geometryCone = new THREE.SphereGeometry(0.1, 32, 64);\r\n        let materialCone = new THREE.MeshPhongMaterial({color: 'green'});\r\n        let cone = new THREE.Mesh(geometryCone, materialCone);\r\n\r\n        VectorX.add(cone);\r\n        VectorX.frustumCulled = false; // PREVENTS LINE FROM DISAPPEARING WHEN IT'S OUT OF CAMERA FRAME\r\n\r\n        scene.add(VectorX)\r\n\r\n        for (let i = 0; i < 3; i++) {\r\n            let VectorInput = document.querySelectorAll('.c')[i];\r\n            console.log(VectorInput)\r\n            VectorInput.id = 'slider-fg' + i\r\n            let slider = document.getElementById('slider-fg' + i);\r\n            slider.addEventListener('change', () => {\r\n                let array = VectorX.geometry.attributes.position.array\r\n                let arrayTest = [\r\n                    0,\r\n                    0,\r\n                    0,\r\n                    0,\r\n                    0,\r\n                    0,\r\n                    gui\r\n                        .__controllers[0]\r\n                        .getValue(),\r\n                    gui\r\n                        .__controllers[1]\r\n                        .getValue(),\r\n                    gui\r\n                        .__controllers[2]\r\n                        .getValue()\r\n                ]\r\n                arrayTest = new Float32Array(arrayTest)\r\n    \r\n                //VECTOR ARROW        \r\n\r\n                new TWEEN\r\n                    .Tween(array)\r\n                    .to(arrayTest)\r\n                    .onStart(()=>{\r\n                        new TWEEN\r\n                        .Tween(cone.position)\r\n                        .to({x: gui.__controllers[0].getValue(), y: gui.__controllers[1].getValue(), z: gui.__controllers[2].getValue(), isVector3: true})\r\n                        .start();\r\n                    })\r\n                    .start();\r\n                function animateTween(time) {\r\n                    TWEEN.update(time)\r\n                    requestAnimationFrame(animateTween)\r\n                    VectorX.geometry.attributes.position.needsUpdate = true; // required after the first render\r\n               // cone.setRotationFromAxisAngle(coneRotation, coneRotationCalculator)\r\n                }\r\n                requestAnimationFrame(animateTween)\r\n            })\r\n        }\r\n\r\n        camera.position.z = 5;\r\n        window.addEventListener('resize', onWindowResize, false);\r\n\r\n        function onWindowResize() {\r\n            renderer.setSize(canvasContainer.clientWidth, canvasContainer.clientHeight);\r\n            camera.aspect = canvasContainer.clientWidth / canvasContainer.clientHeight;\r\n            camera.updateProjectionMatrix();\r\n\r\n        }\r\n\r\n        renderer.setSize(canvasContainer.clientWidth, canvasContainer.clientHeight);\r\n        let animate = () => {\r\n            requestAnimationFrame(animate);\r\n            renderer.render(scene, camera);\r\n        };\r\n        animate();\r\n\r\n    })\r\n\r\n    return (\r\n        <div id=\"CanvasContainer\"></div>\r\n    )\r\n}\r\n\r\nexport default ThreeScene;","import React from 'react'\r\nimport ThreeScene from './Three'\r\nfunction Grid1() {\r\n    return (\r\n        <div className=\"PhysicsContainer\">\r\n            <h1>Vector calculator! <i className=\"fi-cwldxl-arrow-solid\"></i></h1>\r\n            <div className=\"VectorAddition\">\r\n                <h2>Vectors and vectors addition</h2>\r\n                <h4>\r\n                   The intention behind this tool is creating an angle and vector resultant calculator, where you\r\n                   input the values of the vectors (I will only support 2 for now), and the different desired values are displayed\r\n                   in the canvas.\r\n                </h4>\r\n            </div>\r\n            <div className=\"ComponentMethod\">\r\n                <h4>\r\n                    - Click inside the canvas to rotate the camera and right click to move it horizontally.<br />\r\n                    - Use the wheel to zoom in or out of the scene.\r\n                </h4>\r\n                <h3>\r\n                    Do not use the slider to change the vector values, it only accepts input!.\r\n                </h3>\r\n                <ThreeScene />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Grid1;","import React from 'react';\r\nimport './App.css';\r\nimport Grid1 from './components/Grid1'\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"Container\">\r\n      <Grid1 />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\n\r\nfunction Navbar(){\r\n    return(\r\n        <div className=\"Navbar\">\r\n\r\n        </div>\r\n    )\r\n}\r\nexport default Navbar;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport Navbar from './components/Navbar'\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Navbar />\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}