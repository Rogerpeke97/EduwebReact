{"version":3,"sources":["logo.svg","components/Three.js","components/Grid1.js","App.js","serviceWorker.js","components/Navbar.js","index.js"],"names":["module","exports","OrbitControls","require","THREE","ThreeScene","useEffect","canvasContainer","document","getElementById","scene","camera","clientWidth","clientHeight","renderer","position","set","params","Vector1x","Vector1y","Vector1z","gui","dat","autoPlace","domElement","id","appendChild","add","name","console","log","light","target","gridHelper","axisGrid","rotateOnAxis","pointsX","push","pointsY","material2","dots","materialDot","color","geometryX","setFromPoints","geometryY","lineX","lineY","i","dot","load","font","txt_mat","j","TextGeometry","size","height","curveSegments","bevelEnabled","bevelThickness","bevelSize","bevelOffset","bevelSegments","TextMesh","k","pointVector1","geometryVector","VectorX","VectorInput","querySelectorAll","addEventListener","array","geometry","attributes","arrayTest","__controllers","getValue","Float32Array","TWEEN","Tween","to","start","requestAnimationFrame","animateTween","time","update","needsUpdate","z","window","setSize","aspect","updateProjectionMatrix","animate","render","Grid1","className","Three","App","Boolean","location","hostname","match","Navbar","ReactDOM","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.41a049bd.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","import React from 'react';\r\nimport {useEffect} from \"react\";\r\nimport * as THREE from \"three\";\r\nimport * as dat from 'dat.gui';\r\nimport TWEEN from '@tweenjs/tween.js'\r\n\r\nconst OrbitControls = require('three-orbit-controls')(THREE);\r\n\r\nfunction ThreeScene() {\r\n    useEffect(() => {\r\n        let canvasContainer = document.getElementById('CanvasContainer')\r\n        let scene = new THREE.Scene();\r\n        let camera = new THREE.PerspectiveCamera(75, canvasContainer.clientWidth / canvasContainer.clientHeight, 0.1, 1000);\r\n        let renderer = new THREE.WebGLRenderer();\r\n        camera\r\n            .position\r\n            .set(0, 0, 10);\r\n        let params = {\r\n            Vector1x: 0,\r\n            Vector1y: 0,\r\n            Vector1z: 0\r\n        }\r\n        let gui = new dat.GUI({autoPlace: false});\r\n        gui.domElement.id = 'gui';\r\n        canvasContainer.appendChild(gui.domElement);\r\n        gui\r\n            .add(params, 'Vector1x')\r\n            .name('Vector1x')\r\n        gui\r\n            .add(params, 'Vector1y')\r\n            .name('Vector1y')\r\n        gui\r\n            .add(params, 'Vector1z')\r\n            .name('Vector1z')\r\n\r\n        console.log(params.Vector1x)\r\n\r\n        scene.add(new THREE.AmbientLight(0x222222));\r\n        scene.add(new THREE.AxesHelper(5));\r\n\r\n        let light = new THREE.PointLight('white', 3, 200);\r\n        light\r\n            .position\r\n            .set(0, 5, 10);\r\n        scene.add(light);\r\n        document\r\n            .getElementById('CanvasContainer')\r\n            .appendChild(renderer.domElement);\r\n\r\n        let controls = new OrbitControls(camera, renderer.domElement);\r\n        controls\r\n            .target\r\n            .set(0, 0, 0)\r\n\r\n\r\n        // BIG GRID \r\n        /*let bigGridGeometry = new THREE.PlaneGeometry(20, 20, 16, 9);\r\n        let bigGridMaterial = new THREE.MeshBasicMaterial({color: 'white', opacity: 0.5, transparent: true, wireframe: true, side: THREE.DoubleSide});\r\n        let bigGrid = new THREE.Mesh(bigGridGeometry, bigGridMaterial);*/\r\n\r\n        let gridHelper = new THREE.GridHelper( 20, 20 );\r\n        let axisGrid = new THREE.Vector3(1, 0, 0);\r\n        gridHelper.rotateOnAxis(axisGrid, 1.5708)// THE ANGLE IS IN RADIANS, THIS IS 90 DEG\r\n        scene.add(gridHelper);\r\n\r\n\r\n\r\n\r\n        let pointsX = []; // X AXIS LINE\r\n\r\n        pointsX.push(new THREE.Vector3(- 10, 0, 0));\r\n        pointsX.push(new THREE.Vector3(10, 0, 0));\r\n\r\n        let pointsY = []; // Y AXIS LINE\r\n\r\n        pointsY.push(new THREE.Vector3(0, 10, 0));\r\n        pointsY.push(new THREE.Vector3(0, -10, 0));\r\n\r\n        let material2 = new THREE.LineBasicMaterial(); //LINES MATERIAL\r\n\r\n        let dots = new THREE.SphereGeometry(0.05, 32, 32); // DOTS ACROSS X OR Y COORDINATES\r\n\r\n        const materialDot = new THREE.MeshPhongMaterial({color: 'red'}); // DOT MATERIAL\r\n\r\n        let geometryX = new THREE\r\n            .BufferGeometry()\r\n            .setFromPoints(pointsX); // X LINE\r\n\r\n        let geometryY = new THREE\r\n            .BufferGeometry()\r\n            .setFromPoints(pointsY); // Y LINE\r\n\r\n        let lineX = new THREE.Line(geometryX, material2);\r\n\r\n        let lineY = new THREE.Line(geometryY, material2);\r\n\r\n        for (let i = -10; i <= 10; i++) { // setting the dots across the x axis\r\n            let dot = new THREE.Mesh(dots, materialDot);\r\n            dot\r\n                .position\r\n                .set(i, 0, 0);\r\n            lineX.add(dot)\r\n        }\r\n        for (let i = -10; i <= 10; i++) { // setting the dots across the y axis\r\n            let dot = new THREE.Mesh(dots, materialDot);\r\n            dot\r\n                .position\r\n                .set(0, i, 0);\r\n            lineY.add(dot)\r\n        }\r\n        lineX\r\n            .position\r\n            .set(0, 0, 0)\r\n        lineY\r\n            .position\r\n            .set(0, 0, 0)\r\n        scene.add(lineX)\r\n        scene.add(lineY)\r\n\r\n        //NUMBERS FOR THE COORDINATE AXIS\r\n        let loader = new THREE.FontLoader();\r\n        loader.load('fonts/helvetiker_regular.typeface.json', (font) => {\r\n            let txt_mat = new THREE.MeshPhongMaterial({color: 0xffffff});\r\n            for (let j = -10; j <= 10; j++) { // ADDING THE NUMBERS FOR EACH DOT IN X\r\n                let TextGeometry = new THREE.TextGeometry(`${j}`, {\r\n                    font: font,\r\n                    size: 0.1,\r\n                    height: 0.05,\r\n                    curveSegments: 12,\r\n                    bevelEnabled: false,\r\n                    bevelThickness: 1,\r\n                    bevelSize: 0.5,\r\n                    bevelOffset: 0,\r\n                    bevelSegments: 3\r\n                });\r\n                let TextMesh = new THREE.Mesh(TextGeometry, txt_mat);\r\n                TextMesh\r\n                    .position\r\n                    .set(j, -0.2, -0.025)\r\n                lineX.add(TextMesh)\r\n            }\r\n            for (let k = -10; k <= 10; k++) { // ADDING THE NUMBERS FOR EACH DOT IN Y\r\n                let TextGeometry = new THREE.TextGeometry(`${k}`, {\r\n                    font: font,\r\n                    size: 0.1,\r\n                    height: 0.05,\r\n                    curveSegments: 12,\r\n                    bevelEnabled: false,\r\n                    bevelThickness: 1,\r\n                    bevelSize: 0.5,\r\n                    bevelOffset: 0,\r\n                    bevelSegments: 3\r\n                });\r\n                let TextMesh = new THREE.Mesh(TextGeometry, txt_mat);\r\n                TextMesh\r\n                    .position\r\n                    .set(-0.2, k, -0.025)\r\n                lineY.add(TextMesh)\r\n            }\r\n        });\r\n\r\n        // VECTORS\r\n\r\n        let pointVector1 = []\r\n        pointVector1.push(new THREE.Vector3(0, 0, 0));\r\n        pointVector1.push(new THREE.Vector3(0, 0, 0));\r\n        pointVector1.push(new THREE.Vector3(0, 0, 0));\r\n        let geometryVector = new THREE\r\n            .BufferGeometry()\r\n            .setFromPoints(pointVector1); // VECTOR 1 LINE\r\n\r\n        let VectorX = new THREE.Line(geometryVector, material2);\r\n        VectorX\r\n            .position\r\n            .set(0, 0, 0)\r\n        scene.add(VectorX)\r\n\r\n        for (let i = 0; i < 3; i++) {\r\n            let VectorInput = document.querySelectorAll('.c')[i];\r\n            console.log(VectorInput)\r\n            VectorInput.id = 'slider-fg' + i\r\n            let slider = document.getElementById('slider-fg' + i);\r\n            slider.addEventListener('change', () => {\r\n                let array = VectorX.geometry.attributes.position.array\r\n                let arrayTest = [0, 0, 0, 0, 0, 0, gui.__controllers[0].getValue(), gui.__controllers[1].getValue(), gui.__controllers[2].getValue()]\r\n                arrayTest = new Float32Array(arrayTest)\r\n                console.log(array)\r\n                console.log(arrayTest)\r\n                let tween = new TWEEN\r\n                    .Tween(array)\r\n                    .to(arrayTest)\r\n                    .start()\r\n                function animateTween(time) {\r\n                    TWEEN.update(time)\r\n                    requestAnimationFrame(animateTween)\r\n                    VectorX.geometry.attributes.position.needsUpdate = true; // required after the first render\r\n                }\r\n                requestAnimationFrame(animateTween)\r\n            })\r\n        }\r\n\r\n        camera.position.z = 5;\r\n        window.addEventListener('resize', onWindowResize, false);\r\n\r\n        function onWindowResize() {\r\n            renderer.setSize(canvasContainer.clientWidth, canvasContainer.clientHeight);\r\n            camera.aspect = canvasContainer.clientWidth / canvasContainer.clientHeight;\r\n            camera.updateProjectionMatrix();\r\n\r\n        }\r\n\r\n        renderer.setSize(canvasContainer.clientWidth, canvasContainer.clientHeight);\r\n        let animate = () => {\r\n            requestAnimationFrame(animate);\r\n            renderer.render(scene, camera);\r\n        };\r\n        animate();\r\n\r\n    })\r\n\r\n    return (\r\n        <div id=\"CanvasContainer\"></div>\r\n    )\r\n}\r\n\r\nexport default ThreeScene;","import React from 'react'\r\nimport ThreeScene from './Three'\r\nfunction Grid1() {\r\n    return (\r\n        <div className=\"PhysicsContainer\">\r\n            <h1>Physics <i className=\"fi-cwldxl-arrow-solid\"></i></h1>\r\n            <div className=\"VectorAddition\">\r\n                <h2>Vectors and vectors addition</h2>\r\n                <h4>\r\n                    Quantities in physics that have a direction associated with them and cannot be\r\n                    described by a single number.<br/>\r\n                    When a physical quantity is described by a single number, we call it a scalar\r\n                    quantity. In contrast, a vector quantity has both a magnitude (the “how much” or\r\n                    “how big” part) and a direction in space.<br/>\r\n                    Displacement is a change in the position of an object. Displacement is a vector\r\n                    quantity because we must state not only how far the object moves but also in\r\n                    what direction.<br/>\r\n                    We usually represent a vector quantity such as displacement by a single letter,\r\n                    such as A with an arrow on top.<br/>\r\n                    If we make the displacements A and B in reverse order, with B first and A\r\n                    second, the result is the same.<br/>\r\n                    Thus C = B + A and A + B = B + A<br/>\r\n                    This shows that the order of terms in a vector sum doesn’t matter. In other\r\n                    words, vector addition obeys the commutative law.<br/>\r\n                    Making measurements of a diagram offers only very limited accuracy, and\r\n                    calculations with right triangles work only when the two vectors are\r\n                    perpendicular.\r\n                </h4>\r\n            </div>\r\n            <div className=\"ComponentMethod\">\r\n                <h3>Component Method</h3>\r\n                <h4>\r\n                    If we think of A as a displacement vector, we can regard A as the sum of a\r\n                    displacement parallel to the x-axis and a displacement parallel to the y-axis.<br></br>\r\n                    We use the numbers Ax and Ay to tell us how much displacement there is parallel\r\n                    to the x-axis and how much there is parallel to the y-axis, respectively.<br></br>\r\n                    Ax / A = cos (angle) and Ay / A = sin (angle)<br /> \r\n                    Ax = A x cos (angle) and Ay = A x sin (angle)<br />\r\n                    In this example the angle is measured from the + x axis, rotating toward the + y axis2.\r\n                </h4>\r\n                <ThreeScene />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Grid1;","import React from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport Grid1 from './components/Grid1'\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"Container\">\r\n      <Grid1 />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\n\r\nfunction Navbar(){\r\n    return(\r\n        <div className=\"Navbar\">\r\n\r\n        </div>\r\n    )\r\n}\r\nexport default Navbar;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport Navbar from './components/Navbar'\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Navbar />\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}