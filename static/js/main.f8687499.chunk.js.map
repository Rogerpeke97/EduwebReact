{"version":3,"sources":["logo.svg","components/Three.js","components/Grid1.js","App.js","serviceWorker.js","components/Navbar.js","index.js"],"names":["module","exports","OrbitControls","require","THREE","ThreeScene","useEffect","canvasContainer","document","getElementById","scene","camera","clientWidth","clientHeight","renderer","position","set","params","Vector1x","Vector1y","Vector1z","gui","dat","autoPlace","domElement","id","appendChild","add","name","console","log","light","target","pointsX","push","pointsY","material2","dots","materialDot","color","geometryX","setFromPoints","geometryY","lineX","lineY","i","dot","load","font","txt_mat","j","TextGeometry","size","height","curveSegments","bevelEnabled","bevelThickness","bevelSize","bevelOffset","bevelSegments","TextMesh","k","pointVector1","geometryVector","VectorX","VectorInput","querySelectorAll","addEventListener","geometry","attributes","needsUpdate","array","arrayTest","__controllers","getValue","Float32Array","TWEEN","Tween","to","start","requestAnimationFrame","animateTween","time","update","z","window","setSize","aspect","updateProjectionMatrix","animate","render","Grid1","className","Three","App","Boolean","location","hostname","match","Navbar","ReactDOM","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.f8687499.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\nimport {useEffect} from \"react\";\r\nimport * as THREE from \"three\";\r\nimport * as dat from 'dat.gui';\r\nimport TWEEN from '@tweenjs/tween.js'\r\n\r\nconst OrbitControls = require('three-orbit-controls')(THREE);\r\n\r\nfunction ThreeScene() {\r\n    useEffect(() => {\r\n        let canvasContainer = document.getElementById('CanvasContainer')\r\n        let scene = new THREE.Scene();\r\n        let camera = new THREE.PerspectiveCamera(75, canvasContainer.clientWidth / canvasContainer.clientHeight, 0.1, 1000);\r\n        let renderer = new THREE.WebGLRenderer();\r\n        camera\r\n            .position\r\n            .set(0, 0, 10);\r\n        let params = {\r\n            Vector1x: 0,\r\n            Vector1y: 0,\r\n            Vector1z: 0\r\n        }\r\n        let gui = new dat.GUI({autoPlace: false});\r\n        gui.domElement.id = 'gui';\r\n        canvasContainer.appendChild(gui.domElement);\r\n        gui\r\n            .add(params, 'Vector1x')\r\n            .name('Vector1x')\r\n        gui\r\n            .add(params, 'Vector1y')\r\n            .name('Vector1y')\r\n        gui\r\n            .add(params, 'Vector1z')\r\n            .name('Vector1z')\r\n\r\n        console.log(params.Vector1x)\r\n\r\n        scene.add(new THREE.AmbientLight(0x222222));\r\n        scene.add(new THREE.AxesHelper(5));\r\n\r\n        let light = new THREE.PointLight('white', 3, 200);\r\n        light\r\n            .position\r\n            .set(0, 5, 10);\r\n        scene.add(light);\r\n        document\r\n            .getElementById('CanvasContainer')\r\n            .appendChild(renderer.domElement);\r\n\r\n        let controls = new OrbitControls(camera, renderer.domElement);\r\n        controls\r\n            .target\r\n            .set(0, 0, 0)\r\n\r\n        let pointsX = []; // X AXIS LINE\r\n\r\n        pointsX.push(new THREE.Vector3(- 10, 0, 0));\r\n        pointsX.push(new THREE.Vector3(10, 0, 0));\r\n\r\n        let pointsY = []; // Y AXIS LINE\r\n\r\n        pointsY.push(new THREE.Vector3(0, 10, 0));\r\n        pointsY.push(new THREE.Vector3(0, -10, 0));\r\n\r\n        let material2 = new THREE.LineBasicMaterial(); //LINES MATERIAL\r\n\r\n        let dots = new THREE.SphereGeometry(0.05, 32, 32); // DOTS ACROSS X OR Y COORDINATES\r\n\r\n        const materialDot = new THREE.MeshPhongMaterial({color: 'red'}); // DOT MATERIAL\r\n\r\n        let geometryX = new THREE\r\n            .BufferGeometry()\r\n            .setFromPoints(pointsX); // X LINE\r\n\r\n        let geometryY = new THREE\r\n            .BufferGeometry()\r\n            .setFromPoints(pointsY); // Y LINE\r\n\r\n        let lineX = new THREE.Line(geometryX, material2);\r\n\r\n        let lineY = new THREE.Line(geometryY, material2);\r\n\r\n        for (let i = -10; i <= 10; i++) { // setting the dots across the x axis\r\n            let dot = new THREE.Mesh(dots, materialDot);\r\n            dot\r\n                .position\r\n                .set(i, 0, 0);\r\n            lineX.add(dot)\r\n        }\r\n        for (let i = -10; i <= 10; i++) { // setting the dots across the y axis\r\n            let dot = new THREE.Mesh(dots, materialDot);\r\n            dot\r\n                .position\r\n                .set(0, i, 0);\r\n            lineY.add(dot)\r\n        }\r\n        lineX\r\n            .position\r\n            .set(0, 0, 0)\r\n        lineY\r\n            .position\r\n            .set(0, 0, 0)\r\n        scene.add(lineX)\r\n        scene.add(lineY)\r\n\r\n        //NUMBERS FOR THE COORDINATE AXIS\r\n        let loader = new THREE.FontLoader();\r\n        loader.load('fonts/helvetiker_regular.typeface.json', (font) => {\r\n            let txt_mat = new THREE.MeshPhongMaterial({color: 0xffffff});\r\n            for (let j = -10; j <= 10; j++) { // ADDING THE NUMBERS FOR EACH DOT IN X\r\n                let TextGeometry = new THREE.TextGeometry(`${j}`, {\r\n                    font: font,\r\n                    size: 0.1,\r\n                    height: 0.05,\r\n                    curveSegments: 12,\r\n                    bevelEnabled: false,\r\n                    bevelThickness: 1,\r\n                    bevelSize: 0.5,\r\n                    bevelOffset: 0,\r\n                    bevelSegments: 3\r\n                });\r\n                let TextMesh = new THREE.Mesh(TextGeometry, txt_mat);\r\n                TextMesh\r\n                    .position\r\n                    .set(j, -0.2, -0.025)\r\n                lineX.add(TextMesh)\r\n            }\r\n            for (let k = -10; k <= 10; k++) { // ADDING THE NUMBERS FOR EACH DOT IN Y\r\n                let TextGeometry = new THREE.TextGeometry(`${k}`, {\r\n                    font: font,\r\n                    size: 0.1,\r\n                    height: 0.05,\r\n                    curveSegments: 12,\r\n                    bevelEnabled: false,\r\n                    bevelThickness: 1,\r\n                    bevelSize: 0.5,\r\n                    bevelOffset: 0,\r\n                    bevelSegments: 3\r\n                });\r\n                let TextMesh = new THREE.Mesh(TextGeometry, txt_mat);\r\n                TextMesh\r\n                    .position\r\n                    .set(-0.2, k, -0.025)\r\n                lineY.add(TextMesh)\r\n            }\r\n        });\r\n\r\n        // VECTORS\r\n\r\n        let pointVector1 = []\r\n        pointVector1.push(new THREE.Vector3(0, 0, 0));\r\n        pointVector1.push(new THREE.Vector3(10, 10, 0));\r\n        let geometryVector = new THREE\r\n            .BufferGeometry()\r\n            .setFromPoints(pointVector1); // VECTOR 1 LINE\r\n\r\n        let VectorX = new THREE.Line(geometryVector, material2);\r\n        VectorX\r\n            .position\r\n            .set(0, 0, 0)\r\n        scene.add(VectorX)\r\n\r\n        for (let i = 0; i < 3; i++) {\r\n            let VectorInput = document.querySelectorAll('.c')[i];\r\n            console.log(VectorInput)\r\n            VectorInput.id = 'slider-fg' + i\r\n            let slider = document.getElementById('slider-fg' + i);\r\n            slider.addEventListener('change', () => {\r\n                VectorX.geometry.attributes.position.needsUpdate = true; // required after the first render\r\n                let array = VectorX.geometry.attributes.position.array\r\n                let arrayTest = [0, 0, 0, gui.__controllers[0].getValue(), gui.__controllers[1].getValue(), gui.__controllers[2].getValue()]\r\n                arrayTest = new Float32Array(arrayTest)\r\n                console.log(array)\r\n                console.log(arrayTest)\r\n                let tween = new TWEEN\r\n                    .Tween(array)\r\n                    .to(arrayTest, 0.05)\r\n                    .start()\r\n                function animateTween(time) {\r\n                    TWEEN.update(time)\r\n                    requestAnimationFrame(animateTween)\r\n                }\r\n                requestAnimationFrame(animateTween)\r\n            })\r\n        }\r\n\r\n        camera.position.z = 5;\r\n        window.addEventListener('resize', onWindowResize, false);\r\n\r\n        function onWindowResize() {\r\n            renderer.setSize(canvasContainer.clientWidth, canvasContainer.clientHeight);\r\n            camera.aspect = canvasContainer.clientWidth / canvasContainer.clientHeight;\r\n            camera.updateProjectionMatrix();\r\n\r\n        }\r\n\r\n        renderer.setSize(canvasContainer.clientWidth, canvasContainer.clientHeight);\r\n        let animate = () => {\r\n            requestAnimationFrame(animate);\r\n            renderer.render(scene, camera);\r\n        };\r\n        animate();\r\n\r\n    })\r\n\r\n    return (\r\n        <div id=\"CanvasContainer\"></div>\r\n    )\r\n}\r\n\r\nexport default ThreeScene;","import React from 'react'\r\nimport ThreeScene from './Three'\r\nfunction Grid1() {\r\n    return (\r\n        <div className=\"PhysicsContainer\">\r\n            <h1>Physics <i className=\"fi-cwldxl-arrow-solid\"></i></h1>\r\n            <div className=\"VectorAddition\">\r\n                <h2>Vectors and vectors addition</h2>\r\n                <h4>\r\n                    Quantities in physics that have a direction associated with them and cannot be\r\n                    described by a single number.<br/>\r\n                    When a physical quantity is described by a single number, we call it a scalar\r\n                    quantity. In contrast, a vector quantity has both a magnitude (the “how much” or\r\n                    “how big” part) and a direction in space.<br/>\r\n                    Displacement is a change in the position of an object. Displacement is a vector\r\n                    quantity because we must state not only how far the object moves but also in\r\n                    what direction.<br/>\r\n                    We usually represent a vector quantity such as displacement by a single letter,\r\n                    such as A with an arrow on top.<br/>\r\n                    If we make the displacements A and B in reverse order, with B first and A\r\n                    second, the result is the same.<br/>\r\n                    Thus C = B + A and A + B = B + A<br/>\r\n                    This shows that the order of terms in a vector sum doesn’t matter. In other\r\n                    words, vector addition obeys the commutative law.<br/>\r\n                    Making measurements of a diagram offers only very limited accuracy, and\r\n                    calculations with right triangles work only when the two vectors are\r\n                    perpendicular.\r\n                </h4>\r\n            </div>\r\n            <div className=\"ComponentMethod\">\r\n                <h3>Component Method</h3>\r\n                <h4>\r\n                    If we think of A as a displacement vector, we can regard A as the sum of a\r\n                    displacement parallel to the x-axis and a displacement parallel to the y-axis.<br></br>\r\n                    We use the numbers Ax and Ay to tell us how much displacement there is parallel\r\n                    to the x-axis and how much there is parallel to the y-axis, respectively.<br></br>\r\n                    Ax / A = cos (angle) and Ay / A = sin (angle)<br /> \r\n                    Ax = A x cos (angle) and Ay = A x sin (angle)<br />\r\n                    In this example the angle is measured from the + x axis, rotating toward the + y axis2.\r\n                </h4>\r\n                <ThreeScene />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Grid1;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Grid1 from './components/Grid1'\n\nfunction App() {\n  return (\n    <div className=\"Container\">\n      <Grid1 />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\n\r\nfunction Navbar(){\r\n    return(\r\n        <div className=\"Navbar\">\r\n\r\n        </div>\r\n    )\r\n}\r\nexport default Navbar;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport Navbar from './components/Navbar'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Navbar />\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}